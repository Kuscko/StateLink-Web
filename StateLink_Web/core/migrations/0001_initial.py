# Generated by Django 5.0.6 on 2025-05-18 00:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CertificateExistenceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CorporateBylawsRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_names', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FederalEINRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rp_first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Responsible Party First Name')),
                ('rp_middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Responsible Party Middle Name')),
                ('rp_last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Responsible Party Last Name')),
                ('rp_suffix', models.CharField(blank=True, max_length=10, null=True, verbose_name='Responsible Party Suffix')),
                ('rp_ssn_itin', models.CharField(blank=True, max_length=11, null=True, verbose_name='Responsible Party SSN/ITIN')),
                ('rp_ssn_itin_type', models.CharField(blank=True, max_length=4, null=True, verbose_name='SSN or ITIN')),
                ('responsible_party_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Responsible Party Title/Position')),
                ('ein_legal_structure', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type of legal structure applying for EIN')),
                ('reason_for_ein', models.CharField(blank=True, max_length=50, null=True, verbose_name='Reason for requesting EIN')),
                ('other_reason_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Other reason for EIN, if applicable')),
                ('llc_members_count', models.IntegerField(blank=True, null=True, verbose_name='Number of LLC Members')),
                ('llc_physical_state_location', models.CharField(blank=True, max_length=2, null=True, verbose_name='State/Territory where LLC is physically located')),
                ('llc_physical_street', models.CharField(blank=True, max_length=255, null=True, verbose_name='LLC Physical Street Address')),
                ('llc_physical_apt', models.CharField(blank=True, max_length=50, null=True, verbose_name='LLC Physical Apt/Suite')),
                ('llc_physical_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='LLC Physical City')),
                ('llc_physical_zip', models.CharField(blank=True, max_length=10, null=True, verbose_name='LLC Physical ZIP Code')),
                ('llc_has_different_mailing_address', models.BooleanField(blank=True, null=True, verbose_name='Is mailing address different from physical address?')),
                ('llc_mail_street', models.CharField(blank=True, max_length=255, null=True, verbose_name='LLC Mailing Street Address')),
                ('llc_mail_apt', models.CharField(blank=True, max_length=50, null=True, verbose_name='LLC Mailing Apt/Suite')),
                ('llc_mail_city', models.CharField(blank=True, max_length=100, null=True, verbose_name='LLC Mailing City')),
                ('llc_mail_state', models.CharField(blank=True, max_length=2, null=True, verbose_name='LLC Mailing State')),
                ('llc_mail_zip', models.CharField(blank=True, max_length=10, null=True, verbose_name='LLC Mailing ZIP Code')),
                ('llc_legal_name_match_articles', models.CharField(blank=True, max_length=255, null=True, verbose_name='Legal name of LLC (must match articles of organization)')),
                ('llc_trade_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='LLC Trade Name/DBA (if different)')),
                ('llc_county_location', models.CharField(blank=True, max_length=100, null=True, verbose_name='County where LLC is located')),
                ('llc_state_of_organization', models.CharField(blank=True, max_length=2, null=True, verbose_name='State/Territory where articles of organization are (or will be) filed')),
                ('llc_file_date', models.DateField(blank=True, null=True, verbose_name='LLC File Date with State')),
                ('llc_accounting_year_closing_month', models.CharField(blank=True, max_length=20, null=True, verbose_name='Closing month of accounting year')),
                ('business_start_date', models.DateField(blank=True, null=True, verbose_name='Business Start Date or Acquisition Date')),
                ('owns_highway_vehicle_55k_lbs', models.BooleanField(blank=True, null=True, verbose_name='Owns highway motor vehicle with taxable gross weight of 55,000 pounds or more?')),
                ('involves_gambling_wagering', models.BooleanField(blank=True, null=True, verbose_name='Business involves gambling/wagering?')),
                ('needs_to_file_form_720', models.BooleanField(blank=True, null=True, verbose_name='Business needs to file Form 720 (Quarterly Federal Excise Tax Return)?')),
                ('sells_alcohol_tobacco_firearms', models.BooleanField(blank=True, null=True, verbose_name='Business sells or manufactures alcohol, tobacco, or firearms?')),
                ('expects_employees_w2_next_12_months', models.BooleanField(blank=True, null=True, verbose_name='Expects to have any employees who will receive Forms W-2 in the next 12 months?')),
                ('primary_business_activity', models.CharField(blank=True, max_length=100, null=True, verbose_name='Primary Business Activity')),
            ],
        ),
        migrations.CreateModel(
            name='LaborLawPosterRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='OperatingAgreementRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_names', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The legal name of the business entity.', max_length=255, verbose_name='Business Name')),
                ('reference_id', models.CharField(help_text='Unique reference number for the business.', max_length=50, unique=True, verbose_name='Reference Number')),
                ('business_type', models.CharField(choices=[('CORP', 'Corporation'), ('LLC', 'Limited Liability Company')], help_text='Type of business entity.', max_length=10, verbose_name='Business Type')),
                ('address', models.TextField(help_text='Main business address line 1.', verbose_name='Primary Address')),
                ('address2', models.TextField(blank=True, help_text='Optional second line of the address.', null=True, verbose_name='Secondary Address')),
                ('city', models.CharField(help_text='City where the business is located.', max_length=100, verbose_name='City')),
                ('state_code', models.CharField(choices=[('NC', 'North Carolina')], help_text='Two-letter abbreviation for the U.S. state.', max_length=2, verbose_name='State Code')),
                ('zip_code', models.CharField(help_text='ZIP or postal code for the business address.', max_length=10, verbose_name='ZIP Code')),
                ('registered_agent', models.CharField(blank=True, help_text='Registered agent of the business.', max_length=255, null=True, verbose_name='Registered Agent')),
                ('date_formed', models.DateField(help_text='Date the business was legally formed/incorporated.', verbose_name='Date Formed')),
                ('last_filing_date', models.DateField(blank=True, help_text='Date of the last annual report or filing.', null=True, verbose_name='Last Filing Date')),
                ('status', models.CharField(help_text='Current status of the business (e.g., Active, Dissolved).', max_length=50, verbose_name='Status')),
                ('is_new', models.BooleanField(default=False, help_text='Flag for businesses formed in the last 30 days.')),
                ('missing_filing', models.BooleanField(default=False, help_text='True if the business has missed a required filing.')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Business',
                'verbose_name_plural': 'Businesses',
                'indexes': [models.Index(fields=['state_code'], name='core_busine_state_c_1d7db8_idx'), models.Index(fields=['status'], name='core_busine_status_ebf13f_idx'), models.Index(fields=['is_new'], name='core_busine_is_new_e9138b_idx'), models.Index(fields=['missing_filing'], name='core_busine_missing_b6520c_idx'), models.Index(fields=['name'], name='core_busine_name_b3e876_idx'), models.Index(fields=['reference_id'], name='core_busine_referen_85d542_idx'), models.Index(fields=['business_type'], name='core_busine_busines_0a39f6_idx')],
            },
        ),
        migrations.CreateModel(
            name='ComplianceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('ANNUAL_REPORT', 'Annual Report'), ('OPERATING_AGREEMENT', 'Operating Agreement'), ('FEDERAL_EIN', 'Federal EIN Application'), ('LABOR_LAW_POSTER', 'Labor Law Poster'), ('CERTIFICATE_EXISTENCE', 'Certificate of Existence')], max_length=25)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('PAYMENT_PENDING', 'Payment Pending')], default='PENDING', max_length=20)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicant_reference_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Applicant Reference Number (from letter)')),
                ('applicant_first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Applicant First Name')),
                ('applicant_last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Applicant Last Name')),
                ('applicant_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Applicant Email')),
                ('applicant_phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Applicant Phone Number')),
                ('agrees_to_terms_digital_signature', models.BooleanField(blank=True, null=True, verbose_name='Agrees to terms and conditions (digital signature representation)')),
                ('client_signature_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Client Agreement Signature (typed name)')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compliance_requests', to='core.business')),
                ('certificate_existence_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_requests', to='core.certificateexistencerequest')),
                ('corporate_bylaws_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_requests', to='core.corporatebylawsrequest')),
                ('federal_ein_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_requests', to='core.federaleinrequest')),
                ('labor_law_poster_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_requests', to='core.laborlawposterrequest')),
                ('operating_agreement_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='compliance_requests', to='core.operatingagreementrequest')),
            ],
        ),
    ]
