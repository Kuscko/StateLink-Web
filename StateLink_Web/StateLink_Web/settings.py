"""
Django settings for StateLink_Web project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Load environment variables
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Import environment variables based on deployment

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = [
    os.getenv('ALLOWED_HOSTS'),
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    os.getenv('CSRF_TRUSTED_ORIGINS'),
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'widget_tweaks',
    'crispy_forms',
    'crispy_bootstrap5',
    # Add other installed apps here
    # ...
    # Add created apps here
    'users',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add other middleware here
    'django_ratelimit.middleware.RatelimitMiddleware',
]

ROOT_URLCONF = 'StateLink_Web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'StateLink_Web.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
        'OPTIONS': {
            'sslmode': os.getenv('DB_SSL_MODE', 'require'),
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files configuration
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add custom settings here

# Rate limit settings
RATELIMIT_ENABLE = True # Enable rate limiting
RATELIMIT_USE_CACHE = "default" # Use the default cache
RATELIMIT_GLOBAL = None # No global rate limit
RATELIMIT_BY_USER = True # Rate limit by user
RATELIMIT_BY_IP = True # Rate limit by IP address
RATELIMIT_BY_VIEW = True # Rate limit by view
RATELIMIT_FAILURE = "429" # HTTP status code for rate limit failure
RATELIMIT_SUCCESS = "200 OK" # HTTP status code for rate limit success
RATELIMIT_RESET_ON_SUCCESS = True # Reset rate limit on success

# Heartland Payment Configuration
HEARTLAND_PUBLIC_KEY = os.getenv('HEARTLAND_PUBLIC_KEY')
HEARTLAND_SECRET_KEY = os.getenv('HEARTLAND_SECRET_KEY')
HEARTLAND_DEVELOPER_ID = os.getenv('HEARTLAND_DEVELOPER_ID')
HEARTLAND_VERSION_NUMBER = os.getenv('HEARTLAND_VERSION_NUMBER')
HEARTLAND_SERVICE_URL = os.getenv('HEARTLAND_SERVICE_URL')

# HEARTLAND_PUBLIC_KEY = "pkapi_cert_jKc1FtuyAydZhZfbB3"  # Replace with your public key
# HEARTLAND_SECRET_KEY = "skapi_cert_MTyMAQBiHVEAewvIzXVFcmUd2UcyBge_eCpaASUp0A"  # Replace with your secret key
# HEARTLAND_DEVELOPER_ID = "000000"  # Replace with your developer ID
# HEARTLAND_VERSION_NUMBER = "0000"  # Replace with your version number
# HEARTLAND_SERVICE_URL = "https://cert.api2.heartlandportico.com"  # Use production URL in production